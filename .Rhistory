R --version
q()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv', check.names = F,stringsAsFactors = F)
population_table <- read.csv('used_car_data.csv', check.names = F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(readr)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
setwd("~/R-analysis")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
setwd("~/R-analysis/01_Demo")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
library(jsonlite)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
library(tidyverse)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt + geom_density() #visualize distribution using density plot
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
plt + geom_density()
t.test(log10(sample_table%24Miles_Driven)%2Cmu%3Dmean(log10(population_table%24Miles_Driven)))
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
aov(hp ~ cyl,data=mtcars_filt)
summary(aov(hp ~ cyl,data=mtcars_filt))
setwd("~/MechaCar_Statistical_Analysis")
library(dplyr)
mpg_data <- read.csv('MechaCarChallenge.RScript')
library(dplyr)
mpg_data <- read.csv('MechaCar_mpg.csv')
lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance,data=mpg_data)
summary(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance,data=mpg_data) #summarize linear model
summary(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance,data=mpg_data))
summary(lm(mpg~vehicle_length+vehicle_weight+spoiler_angle+ground_clearance,data=mpg_data))
